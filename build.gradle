/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.15')
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building a CLI application
    id 'application'
    id 'jacoco'
    //id 'com.github.sherter.google-java-format' version '0.8'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'org.sonarqube' version '2.7.1'
    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/
    id 'org.springframework.boot' version '2.1.8.RELEASE'
    id 'io.freefair.lombok' version '4.0.1'
}

apply plugin: 'io.spring.javaformat'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-csv
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.7'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-all
    runtime group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.7'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:27.1-jre'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
    // https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
    // https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito2
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
}

group 'com.github.wdstar'
version = {
    def tags = grgit.tag.list().collect { it.getName() }
    def versionStr
    if (tags.any { it ==~ /v\d.*/ }) {
        versionStr = grgit.describe(longDescr: false, tags: true, match: ['v[0-9]*'])
    } else {
        versionStr = grgit.head().abbreviatedId
    }
    return versionStr.replaceFirst(/^v/, '') + (grgit.status().isClean() ? '' : '+dirty')
}()

task showVersion {
    doLast {
        println version
    }
}

application {
    // Define the main class for the application
    mainClassName = 'com.github.wdstar.java.cli.Example'
}

test {
    testLogging {
        events 'passed', 'failed', 'skipped'
    }
}

def jarExcludes = [
    'META-INF/INDEX.LIST',
    'META-INF/*.SF',
    'META-INF/*.DSA',
    'META-INF/*.RSA'
]

jar {
    // By default, when the bootJar or bootWar tasks are configured, the jar or war tasks are disabled.
    // A project can be configured to build both an executable archive and a normal archive at the same time
    // by enabling the jar or war task:
    enabled = true
    manifest {
        attributes 'Manifest-Version': '0.1.0'
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': version
        attributes 'Main-Class': application.mainClassName
    }
    
    version version
    // Note: this fat jar excludes any JAR index or cryptographic signature files like the Shadow plugin.
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it).matching { exclude jarExcludes } }
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it).matching { exclude jarExcludes } }
}

// nested jar generation task
bootJar {
    manifest {
        attributes 'Manifest-Version': '0.1.0'
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': version
    }
    
    mainClassName = application.mainClassName
}

// uber jar generation task
shadowJar {
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

// for `report` task of Jacoco with PowerMock
apply from: 'gradle/jacoco-offline-instrument.gradle'

project.tasks['sonarqube'].dependsOn 'report'
sonarqube {
    properties {
        property 'sonar.projectKey', 'wdstar_java-cli-example'
        property 'sonar.organization', 'wdstar'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.jacoco.reportPath', report.jacocoDestFile
    }
}
